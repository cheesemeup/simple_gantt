# simple_gantt.py
# Author: cheesemeup

"""This script generates a very simple Gantt chart, based on the configuration in the runscript.

The intended resolution is in months, to provide a rough outline for work packages in multi-year projects
"""

import matplotlib.pyplot as plt
import json

def simple_gantt():
    """Driver for creating a simple Gantt chart

    Reads a config file, which is generated by the runscript, and creates a Gantt chart based on the configuration
    """
    # get config
    config = get_config()

    # make chart
#    make_chart(config)


def get_config():
    """Get the config for the Gantt chart specified in the runscript

    Returns:
        config (dict): Configuration for the Gantt chart
    """
    # open file and read content
    # the config file location and name is hardcoded, as it is generated by the runscript
    with open('simple_gantt_config.cnf') as file:
        config_string = file.read()

    # convert from string representation of a dict to an actual dict for ease of use
    config = json.loads(config_string)

    # log
    print('config read')
    return config


def make_chart(config: dict):
    """Create and save the chart

    Args:
        config (dict): Configuration for the Gantt chart
    """
    # open figure
    fig = plt.figure()

    # zoom based on the number of tasks and months
    # plt.xlim = ([0,max(max(config.work_packages))])
    # plt.ylim = ([0.5,len(config.work_packages)+0.5])

    # title
    # plt.title(config.figure_title)

    # create axis labels, note that order is inverted
    # ytick_position, ytick_label = generate_yticks()
    # plt.yticks = (ytick_position, ytick_label)
    # xtick_position, xtick_label = generate_xticks()
    # plt.xticks = (xtick_position, xtick_label)


    # create boxes, note that order is inverted


    # save figure
    plt.savefig(f"out/{config['figure_filename']}")
    plt.close()

    # log
    print(f"figure saved as out/{config['figure_filename']}")


def generate_yticks():
    pass


def generate_xticks():
    pass


if __name__ == "__main__":
    simple_gantt()

